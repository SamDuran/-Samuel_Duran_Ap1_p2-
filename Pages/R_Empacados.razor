@page "/R_Empacados"
@page "/R_Empacados/{EmpaqueId:int}"

@inject IToastService toastService
@using Utilities

<EditForm Model="empacado" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div className="Container">
        <div class="card align-items-center">

            <div class="card-header">
                <h4>Entrada de productos empacados</h4>
            </div>

            <div class="card-body" style="width: 50rem;">

                @* Id Producto *@
                <div class="form-row align-items-center" style="margin: 20px;">
                    <div class="col">
                        <div class="input-group" style="width: 20rem;">
                            <span class="input-group-text" style="width: 100px;">Id</span>
                            <InputNumber @bind-Value="empacado.EmpacadosId" class="form-control col-4" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary input-group-text"
                                    @onclick="@(() => Buscar())">
                                    <span class="oi oi-magnifying-glass"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                @* Fecha *@
                <div class="input-group" style="margin: 20px; width: 20rem;">
                    <span class="input-group-text" style="width: 100px;">Fecha</span>
                    <InputDate @bind-Value="empacado.FechaIngreso" Format='yyyy-MM-dd' class="form-control col-4" />
                </div>

                @* Concepto *@
                <div class="input-group" style="margin: 20px;">
                    <span class="input-group-text" style="width: 100px;">Concepto</span>
                    <InputText @bind-Value="empacado.Concepto" class="form-control col-4" placeholder="Concepto" />
                </div>

                @* SubCard Utilizados *@
                <div class="card">

                    <div class="card-header">
                        <h3>Utilizados</h3>
                    </div>

                    <div class="card-body">
                        <div class="input-group d-flex align-items-end">
                            <div class="flex-fill mx-2">
                                <label>Producto</label>
                                <InputSelect id="productoSeleccionado" @bind-Value="numeroId" class="form-control">
                                    <option value="" selected="selected" disabled="disabled" hidden="hidden">--Seleccione un producto a utilizar--</option>
                                    @foreach (var item in listaProducto)
                                    {
                                        <option value="@item.ProductoId.ToString()">@item.Descripcion</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="flex-fill mx-2" style="width: 12px;">
                                <label>Cantidad</label>
                                <InputNumber class="form-control" @bind-Value="utilizado.Cantidad" />
                            </div>
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary input-group-text"
                                    @onclick="AgregarUtilizado">
                                    <span class="oi oi-plus"> Add</span>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        @* Tabla de detalles *@
                        <table class="table table-bordered table-light">
                            <thead class="thead">
                                <tr class="table">
                                    <th>ProductoId</th>
                                    <th>Descripci&oacute;n</th>
                                    <th>Cantidad</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in empacado.ProductosUtilizados)
                                {
                                    <tr>
                                        <td>@item.Id</td>
                                        <td>@item.producto.Descripcion</td>
                                        <td>@item.Cantidad</td>
                                        <td><span class="btn btn-sm btn-outline-secondary oi oi-x"
                                            @onclick="@(() => RemoverUtilizado(item))"></span></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        @* Peso Total *@
                        <div Class="form-group" style="margin: 22px;">
                            <div class="input-group">
                                <span class="input-group-text" style="width: 160px;">Peso Total (Gr)</span>
                                <InputNumber readonly class="form-control" @bind-Value="empacado.Peso" />
                            </div>
                        </div>
                    </div>
                </div>

                @* SubCard Producidos *@
                <div class="card">
                    <div class="card-header">
                        <h3>Producido</h3>
                    </div>
                    <div class="card-body d-flex align-items-end">
                        <div class="flex-fill mx-2">
                            <label>Producto</label>
                            <InputSelect id="producidas" @bind-Value="empacado.ProductoId" class="form-control">
                                <option value="0" selected="selected" disabled="disabled" hidden="hidden">--Seleccione un producto a producir--</option>
                                @foreach (var item in listaProducto)
                                {
                                    <option value="@item.ProductoId">@item.Descripcion</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="flex-fill mx-2" style="width: 12px;">
                            <label>Cantidad</label>
                            <InputNumber class="form-control" @bind-Value="empacado.Cantidad" @onblur="CantidadChanged"/>
                        </div>
                    </div>
                    <div Class="form-group" style="margin: 22px;">
                            <div class="input-group">
                                <span class="input-group-text">Peso Total a Producir: (Gr)</span>
                                <InputNumber readonly class="form-control" @bind-Value="PesoTotal" />
                            </div>
                        </div>
                </div>
            </div>
            @* Botones *@
            <div class="card-footer">
                <div class="form-group text-center" display:inline-block>
                    <button type="button" class="btn btn-primary input-group-text" @onclick="Nuevo">
                        <span class="oi oi-plus"> Nuevo</span>
                    </button>
                    <button type="submit" class="btn btn-success input-group-text">
                        <span class="oi oi-check"> Guardar</span>
                    </button>
                    <button type="button" class="btn btn-danger input-group-text" @onclick="Eliminar">
                        <span class="oi oi-minus"> Eliminar</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int EmpaqueId { get; set; }
    [Inject]
    public ProductosBLL productosBLL { get; set; }
    [Inject]
    public EmpacadosBLL empacadosBLL { get; set; }
    public string? numeroId { get; set; } = "";
    public decimal PesoTotal {get; set; } = 0;
    public Empacados empacado { get; set; } = new Empacados();
    public List<Productos> listaProducto { get; set; } = new List<Productos>();
    public Productos? producto { get; set; } = new Productos();
    public ProductosUtilizados utilizado { get; set; } = new ProductosUtilizados();

    protected override void OnInitialized()
    {
        this.empacado.EmpacadosId = EmpaqueId;
        Buscar();
        listaProducto = productosBLL.GetList(p => true);
    }
    protected void Buscar()
    {
        if (this.empacado.EmpacadosId > 0)
        {
            var encontrado = empacadosBLL.Buscar(this.empacado.EmpacadosId);
            if (encontrado != null)
                this.empacado = encontrado;
            else
                toastService.ShowError($"No se encontró el empaque con ID {empacado.EmpacadosId}");
        }
    }
    public void AgregarUtilizado()
    {
        this.producto = productosBLL.Buscar(Utilities.ToIntConsulta(numeroId));
        this.utilizado.producto= (producto!=null)?producto : new Productos();
        this.utilizado.Id = (producto!=null)?producto.ProductoId: 0;
        empacado.Peso += utilizado.Cantidad*utilizado.producto.Peso;
        bool esta = empacado.ProductosUtilizados.Any(p => p.Id == utilizado.Id);
        if (!esta) //si es nuevo se agrega como tal
            this.empacado.ProductosUtilizados.Add(this.utilizado);

        else //si ya existe se le suma la cantidad (para evitar repetir utilizados)
        {
            var buscado = empacado.ProductosUtilizados.Find(p => p.Id == utilizado.Id);
            if(buscado!=null)
            {
                utilizado.Cantidad += buscado.Cantidad;
                this.empacado.ProductosUtilizados.Remove(buscado);
                this.empacado.ProductosUtilizados.Add(this.utilizado);
            }
        }
        this.utilizado = new ProductosUtilizados();
        this.producto = new Productos();
    }
    public void RemoverUtilizado(ProductosUtilizados utilizado)
    {
        this.empacado.ProductosUtilizados.Remove(utilizado);
        empacado.Peso-= utilizado.Cantidad*utilizado.producto.Peso;
    }
    private void CantidadChanged()
    {
        var producido = productosBLL.Buscar(empacado.ProductoId);
        if(producido!=null)
            PesoTotal = empacado.Cantidad * producido.Peso;
    }
    public void Nuevo()
    {
        this.empacado = new Empacados();
        this.utilizado = new ProductosUtilizados();
    }
    public void Guardar()
    {
        var producido = productosBLL.Buscar(this.empacado.ProductoId);

        if(producido==null) //Si el producido no se encontró en la base de datos.
        {
            toastService.ShowError("El producto que desea producir no se encontró." +
            $" Verifique su existencia en la consulta de productos con el siguiente id {empacado.ProductoId}");
            return;
        }

        producido.ValorInventario = producido.Existencia * producido.Costo; //calculamos el valorInventario del producido.
        Empacados? empacado2 = empacadosBLL.ExisteConcepto(this.empacado.Concepto);
        if(empacado2 == null) //Si no existe 
        {
            if (Validar())
            {
                if (empacadosBLL.Guardar(empacado))
                    toastService.ShowSuccess("Se guardó exitosamente");
                else
                    toastService.ShowError("No se pudo guardar.");
            }else
            {
                toastService.ShowInfo("Se desea producir un peso invalido. Por favor verifique el peso de los utilizados y el producido.");
            }
        }else
        {
            if(empacado2.Concepto.ToLower() == this.empacado.Concepto.ToLower() && empacado2.EmpacadosId == empacado.EmpacadosId)
            {
                if (Validar())
                {
                    if (empacadosBLL.Guardar(empacado))
                        toastService.ShowSuccess("Se guardó exitosamente");
                    else
                        toastService.ShowError("No se pudo guardar.");
                }else
                {
                    toastService.ShowInfo("Se desea producir un peso invalido. Por favor verifique el peso de los utilizados y el producido.");
                }
            }else
            {
                toastService.ShowError($"El empaque con el concepto \"{empacado.Concepto}\" ya está registrado " +
                $"con el siguiente ID: {empacado2.EmpacadosId}");
            }
        }
        
    }
    public bool Validar()
    {
        Productos? producido = productosBLL.Buscar(this.empacado.ProductoId);
        if (producido != null && empacado.Peso >= producido.Peso*empacado.Cantidad) 
            return true;
        else
            return false;
    }
    public void Eliminar()
    {
        if (empacadosBLL.Eliminar(empacado.EmpacadosId))
        {
            Nuevo();
            toastService.ShowSuccess("Eliminación exitosa");
        }
        else
        {
            toastService.ShowError("Eliminación fallida");
        }
    }
}
